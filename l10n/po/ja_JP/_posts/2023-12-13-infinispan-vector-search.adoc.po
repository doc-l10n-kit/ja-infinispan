# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2023-12-14 12:23+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. type: Plain text
#: upstream/_posts/2023-12-13-infinispan-vector-search.adoc:1
#, no-wrap
msgid "---\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2023-12-13-infinispan-vector-search.adoc:8
#, no-wrap
msgid ""
"layout: blog\n"
"title: Infinispan kNN Vector Search\n"
"permalink: /blog/:year/:month/:day/infinispan-vector-search\n"
"date: '2023-12-13T19:37:00.000-00:00'\n"
"author: fax4ever\n"
"tags: [ \"search\", \"vector\", \"knn\", \"indexing\", \"embeddings\" ]\n"
"---\n"
msgstr ""

#. type: Title =
#: upstream/_posts/2023-12-13-infinispan-vector-search.adoc:10
#, no-wrap
msgid "Infinispan kNN Vector Search"
msgstr ""

#. type: Plain text
#: upstream/_posts/2023-12-13-infinispan-vector-search.adoc:14
msgid "With Infinispan 15.0.0.Dev06, we have started to expose vector search capabilities using Infinispan's indexed queries.  Using the newly introduced kNN predicate, it is possible to find and order results by the k nearest neighbors of a given vector."
msgstr ""

#. type: Title ==
#: upstream/_posts/2023-12-13-infinispan-vector-search.adoc:15
#, no-wrap
msgid "Mapping the embeddings"
msgstr ""

#. type: Plain text
#: upstream/_posts/2023-12-13-infinispan-vector-search.adoc:18
msgid "The new `@Vector` indexing annotation is used to mark a field as an embedding. Embeddings are vector representations of data, according to a defined model."
msgstr ""

#. type: Plain text
#: upstream/_posts/2023-12-13-infinispan-vector-search.adoc:21
msgid "The vector dimension is mandatory and should be defined at mapping time.  Other options that can be specified during mapping are:"
msgstr ""

#. type: Plain text
#: upstream/_posts/2023-12-13-infinispan-vector-search.adoc:23
msgid "the similarity (distance) function"
msgstr ""

#. type: Plain text
#: upstream/_posts/2023-12-13-infinispan-vector-search.adoc:24
msgid "the beam width"
msgstr ""

#. type: Plain text
#: upstream/_posts/2023-12-13-infinispan-vector-search.adoc:25
msgid "the maximum number of connections."
msgstr ""

#. type: Plain text
#: upstream/_posts/2023-12-13-infinispan-vector-search.adoc:27
msgid "Bear in mind that these values affect the performance of the approximation algorithm that is used to compute the kNN search."
msgstr ""

#. type: Plain text
#: upstream/_posts/2023-12-13-infinispan-vector-search.adoc:29
msgid "We support `byte[]` embeddings. Here is an example of mapping:"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2023-12-13-infinispan-vector-search.adoc:37
#, no-wrap
msgid ""
"@Vector(dimension = 3)\n"
"@ProtoField(2)\n"
"public byte[] getByteVector() {\n"
"   return byteVector;\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2023-12-13-infinispan-vector-search.adoc:40
#: upstream/_posts/2023-12-13-infinispan-vector-search.adoc:61
msgid "That corresponds to the Proto schema:"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2023-12-13-infinispan-vector-search.adoc:47
#, no-wrap
msgid ""
"/**\n"
" * @Vector(dimension=3)\n"
" */\n"
"optional bytes byteVector = 2;\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2023-12-13-infinispan-vector-search.adoc:50
msgid "We also support `float[]` embeddings. Here is an example of mapping:"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2023-12-13-infinispan-vector-search.adoc:58
#, no-wrap
msgid ""
"@Vector(dimension = 3)\n"
"@ProtoField(3)\n"
"public float[] getFloatVector() {\n"
"   return floatVector;\n"
"}\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2023-12-13-infinispan-vector-search.adoc:68
#, no-wrap
msgid ""
"/**\n"
" * @Vector(dimension=3)\n"
" */\n"
"repeated float floatVector = 3;\n"
msgstr ""

#. type: Title ==
#: upstream/_posts/2023-12-13-infinispan-vector-search.adoc:70
#, no-wrap
msgid "Searching the embeddings"
msgstr ""

#. type: Plain text
#: upstream/_posts/2023-12-13-infinispan-vector-search.adoc:73
msgid "The following query shows how to perform a kNN search using a supplied vector and a specific distance"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2023-12-13-infinispan-vector-search.adoc:77
#, no-wrap
msgid "from Item i where i.byteVector <-> [7,7,7]~3\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2023-12-13-infinispan-vector-search.adoc:80
msgid "The query can be parameterized in several ways:"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2023-12-13-infinispan-vector-search.adoc:89
#, no-wrap
msgid ""
"query = cache.query(\"from org.infinispan.query.model.Item i where i.byteVector <-> [:a,:b,:c]~3\");\n"
"query.setParameter(\"a\", 0);\n"
"query.setParameter(\"b\", 2);\n"
"query.setParameter(\"c\", 3);\n"
"hits = query.list();\n"
"assertThat(hits).extracting(\"code\").containsExactly(\"c2\", \"c1\", \"c3\"); // the order matters\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2023-12-13-infinispan-vector-search.adoc:92
msgid "Or you can pass the entire vector as a single parameter:"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2023-12-13-infinispan-vector-search.adoc:100
#, no-wrap
msgid ""
"query = cache.query(\"from org.infinispan.query.model.Item i where i.floatVector <-> [:a]~:b\");\n"
"query.setParameter(\"a\", new float[]{7.1f, 7.0f, 3.1f});\n"
"query.setParameter(\"b\", 3);\n"
"hits = query.list();\n"
"assertThat(hits).extracting(\"code\").containsExactly(\"c5\", \"c6\", \"c4\");\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2023-12-13-infinispan-vector-search.adoc:103
msgid "If the cache is distributed, the query will be a broadcast query, and it will aggregate all the results from all the nodes that contain shards of the indexes that are related to the search.  When we get the result as usual we get all the metadata from the corresponding entities, so that the returning items can easily relate to the application domain."
msgstr ""
